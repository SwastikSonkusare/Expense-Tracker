[{"D:\\expense\\src\\index.js":"1","D:\\expense\\src\\App.js":"2","D:\\expense\\src\\components\\Details\\Details.js":"3","D:\\expense\\src\\components\\Details\\styles.js":"4","D:\\expense\\src\\styles.js":"5","D:\\expense\\src\\components\\Main\\Main.js":"6","D:\\expense\\src\\components\\Main\\styles.js":"7","D:\\expense\\src\\components\\Main\\Form\\Form.js":"8","D:\\expense\\src\\components\\Main\\Form\\styles.js":"9","D:\\expense\\src\\components\\Main\\List\\List.js":"10","D:\\expense\\src\\components\\Main\\List\\styles.js":"11","D:\\expense\\src\\context\\context.js":"12","D:\\expense\\src\\context\\contextReducer.js":"13","D:\\expense\\src\\constants\\categories.js":"14","D:\\expense\\src\\utils\\formatDate.js":"15","D:\\expense\\src\\useTransactions.js":"16","D:\\expense\\src\\components\\SnackBar\\SnackBar.js":"17","D:\\expense\\src\\components\\SnackBar\\styles.js":"18","D:\\expense\\src\\components\\InfoCard.js":"19"},{"size":445,"mtime":1609935381224,"results":"20","hashOfConfig":"21"},{"size":1621,"mtime":1610088348524,"results":"22","hashOfConfig":"21"},{"size":749,"mtime":1609934743142,"results":"23","hashOfConfig":"21"},{"size":250,"mtime":1609912549789,"results":"24","hashOfConfig":"21"},{"size":580,"mtime":1609912322250,"results":"25","hashOfConfig":"21"},{"size":1319,"mtime":1610088396059,"results":"26","hashOfConfig":"21"},{"size":511,"mtime":1609912683457,"results":"27","hashOfConfig":"21"},{"size":5171,"mtime":1610087801522,"results":"28","hashOfConfig":"21"},{"size":245,"mtime":1609913363623,"results":"29","hashOfConfig":"21"},{"size":1612,"mtime":1609931788836,"results":"30","hashOfConfig":"21"},{"size":414,"mtime":1609914027862,"results":"31","hashOfConfig":"21"},{"size":1044,"mtime":1610086591686,"results":"32","hashOfConfig":"21"},{"size":622,"mtime":1610085496202,"results":"33","hashOfConfig":"21"},{"size":1691,"mtime":1609932101291,"results":"34","hashOfConfig":"21"},{"size":369,"mtime":1609932587496,"results":"35","hashOfConfig":"21"},{"size":1143,"mtime":1609934757368,"results":"36","hashOfConfig":"21"},{"size":841,"mtime":1610087188751,"results":"37","hashOfConfig":"21"},{"size":204,"mtime":1610086737336,"results":"38","hashOfConfig":"21"},{"size":492,"mtime":1610087663124,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"8almh1",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"D:\\expense\\src\\index.js",[],["81","82"],"D:\\expense\\src\\App.js",[],"D:\\expense\\src\\components\\Details\\Details.js",[],"D:\\expense\\src\\components\\Details\\styles.js",[],"D:\\expense\\src\\styles.js",[],"D:\\expense\\src\\components\\Main\\Main.js",[],"D:\\expense\\src\\components\\Main\\styles.js",[],"D:\\expense\\src\\components\\Main\\Form\\Form.js",["83"],"import React, { useState, useContext, useEffect } from 'react'\r\nimport { TextField, Typography, Grid, Button, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core'\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport { useSpeechContext } from '@speechly/react-client';\r\n\r\nimport useStyles from './styles'\r\nimport { ExpenseTrackerContext } from '../../../context/context'\r\nimport { incomeCategories, expenseCategories } from '../../../constants/categories' \r\nimport formatDate from '../../../utils/formatDate'\r\nimport CustomizedSnackBar from '../../SnackBar/SnackBar';\r\n\r\nconst initialState = {\r\n    amount: '',\r\n    category: '',\r\n    type: 'Income',\r\n    date: formatDate(new Date())\r\n}\r\n\r\n\r\n\r\nconst Form = () => {\r\n    const classes = useStyles();\r\n    const [FormData, setFormData] = useState(initialState)\r\n    const { addTransaction } = useContext(ExpenseTrackerContext)\r\n    const { segment } = useSpeechContext(); \r\n    const [open, setOpen] = useState(false)\r\n\r\n    const createTransaction = ()=>{\r\n        if(Number.isNaN(Number(FormData.amount)) || !FormData.date.includes('-')) return\r\n        const transaction = {...FormData, amount: Number(FormData.amount), id: uuidv4()}\r\n        addTransaction(transaction)\r\n        \r\n        setOpen(true);\r\n        setFormData(initialState)\r\n    }\r\n\r\n    useEffect(() =>{\r\n        if(segment) {\r\n            if(segment.intent.intent === 'add_expense') {\r\n                setFormData({ ...FormData, type: 'Expense'})\r\n            } else if(segment.intent.intent === 'add_income') {\r\n                setFormData({ ...FormData, type: 'Income'})\r\n            } else if(segment.isFinal && segment.intent.intent === 'create_transaction') {\r\n                return createTransaction()\r\n            } else if(segment.isFinal && segment.intent.intent === 'cancel_transaction') {\r\n                return setFormData(initialState)\r\n            } \r\n\r\n            segment.entities.forEach((e) =>{\r\n                const category = `${e.value.charAt(0)}${e.value.slice(1).toLowerCase()}`\r\n                switch(e.type) {\r\n                    case 'amount':\r\n                        setFormData({...FormData, amount: e.value})\r\n                        break;\r\n                    case 'category':\r\n                        if(incomeCategories.map((iC) => iC.type).includes(category)) {\r\n                            setFormData({...FormData,  type: 'Income', category})\r\n                        } else if(expenseCategories.map((iC) => iC.type).includes(category)){\r\n                            setFormData({...FormData,  type: 'Expense', category})\r\n                        }\r\n                        break;\r\n                    case 'date':\r\n                        setFormData({...FormData, date: e.value})\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            })\r\n\r\n            if(segment.isFinal && FormData.amount && FormData.category && FormData.type && FormData.date) {\r\n                createTransaction();\r\n            }\r\n        }\r\n    }, [segment])\r\n\r\n    const selectedCategories = FormData.type === 'Income' ? incomeCategories : expenseCategories\r\n    \r\n    return (\r\n        <Grid container spacing={2}>\r\n            <CustomizedSnackBar open={open} setOpen={setOpen}/>\r\n            <Grid item xs={12}>\r\n                <Typography align='center' variant='subtitle2' gutterBottom>\r\n                    {segment && segment.words.map((w) => w.value).join(\" \")}\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                    <InputLabel>Type</InputLabel>\r\n                    <Select value={FormData.type} onChange={(e) => setFormData({...FormData, type: e.target.value})}>\r\n                        <MenuItem value='Income'>Income</MenuItem>\r\n                        <MenuItem value='Expense'>Expense</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                    <InputLabel>Category</InputLabel>\r\n                    <Select value={FormData.category} onChange={(e) => setFormData({...FormData, category: e.target.value})}>\r\n                        {selectedCategories.map((c) => (\r\n                            <MenuItem key={c.type} value={c.type}>{c.type}</MenuItem>\r\n                        ))}\r\n                    </Select> \r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <TextField type='number' label='Amount' fullWidth value={FormData.amount} onChange={(e) => setFormData({...FormData, amount: e.target.value})}/>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <TextField type='date' label='Date' fullWidth value={FormData.date} onChange={(e) => setFormData({...FormData, date: formatDate(e.target.value)})}/>\r\n            </Grid>\r\n            <Button className={classes.button} variant='outlined' color='primary' fullWidth onClick={createTransaction}>\r\n                Create\r\n            </Button>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","D:\\expense\\src\\components\\Main\\Form\\styles.js",[],["84","85"],"D:\\expense\\src\\components\\Main\\List\\List.js",[],"D:\\expense\\src\\components\\Main\\List\\styles.js",[],"D:\\expense\\src\\context\\context.js",[],"D:\\expense\\src\\context\\contextReducer.js",[],"D:\\expense\\src\\constants\\categories.js",[],"D:\\expense\\src\\utils\\formatDate.js",[],"D:\\expense\\src\\useTransactions.js",[],"D:\\expense\\src\\components\\SnackBar\\SnackBar.js",[],"D:\\expense\\src\\components\\SnackBar\\styles.js",[],"D:\\expense\\src\\components\\InfoCard.js",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":74,"column":8,"nodeType":"92","endLine":74,"endColumn":17,"suggestions":"93"},{"ruleId":"86","replacedBy":"94"},{"ruleId":"88","replacedBy":"95"},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'FormData' and 'createTransaction'. Either include them or remove the dependency array. You can also do a functional update 'setFormData(F => ...)' if you only need 'FormData' in the 'setFormData' call.","ArrayExpression",["98"],["96"],["97"],"no-global-assign","no-unsafe-negation",{"desc":"99","fix":"100"},"Update the dependencies array to be: [FormData, createTransaction, segment]",{"range":"101","text":"102"},[3063,3072],"[FormData, createTransaction, segment]"]